#!/usr/bin/env python3
import argparse
import sys
import re
import subprocess
from typing import List, Optional
from pathlib import Path
import json
from io import StringIO
import tempfile

import psycopg2

depends_re = re.compile(r'.*?(materialized view|view) ["]?([^"]+)["]?\.["]?([^"]+)["]? depends on ([a-z ]+) ["]?([^"]+)["]?(\.["]?([^"]+)["]?)?')
statement_re = re.compile(r'.* STATEMENT:\s+(.*)')
drop_statement_re = re.compile(r'.* cannot (drop.*) because other objects depend on it')


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--function', help='function'
    )

    args = parser.parse_args()

    process(args.function)


def transform_definition(definition: str) -> str:
    transformed_definition = re.sub(r'\(entity_id integer,', '(entity_id bigint,', definition)

    if transformed_definition == definition:
        raise Exception("Nothing changed!")

    return transformed_definition


def process(function: str):
    tempfile_path = Path(f"/tmp/update-function.sql")

    with tempfile_path.open("w") as tempfile:
        generate_update_script(function, transform_definition, tempfile)

    print("Generated '{}'".format(tempfile_path))

    result = execute_sql_script(tempfile_path)

    if result:
        print(result)
    else:
        print("Function updated successfully: {}".format(function))


def get_function_def(function: str) -> str:
    query = f"SELECT pg_get_functiondef('{function}'::regprocedure::oid)"
    print(query)

    with psycopg2.connect("") as conn:
        with conn.cursor() as cursor:
            cursor.execute(query)

            definition, = cursor.fetchone()

    return definition


def generate_update_script(function: str, transform, out_file):
    definition = get_function_def(function)

    transformed_definition = transform(definition)

    out_file.write('BEGIN;\n')

    out_file.write(f'DROP FUNCTION {function};\n')

    out_file.write(transformed_definition)
    out_file.write(";\n")

    out_file.write('COMMIT;\n')


def execute_query(query: str) -> List[str]:
    execute_query_cmd = ['psql', '-c', query]

    result = subprocess.run(execute_query_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    return result.stderr.decode('utf-8').split('\n')


def execute_sql_script(script: Path) -> Optional[List[str]]:
    execute_query_cmd = ['psql', '-v', "ON_ERROR_STOP=1", '-f', str(script)]

    print("Executing psql command")

    result = subprocess.run(execute_query_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if result.returncode != 0:
        return result.stderr.decode('utf-8').split('\n')

    return None


if __name__ == '__main__':
    main()
